# -*- coding: utf-8 -*-
"""TL_training.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1elLr9uuJ_ErM9IG0DQFsOwpSZC5bR2a_

**Dosyalari tekrar cagirma**

---
"""

import numpy  as np
import pickle
import matplotlib.pyplot as plt
import tensorflow as tf

import seaborn as sns
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

# x_train, y_train, x_val, y_val, x_test ve y_test verilerini cagiralim.

X_train = pickle.load(open("/content/drive/MyDrive/transfer_learning/pickles/X_train.pickle", "rb"))
y_train = pickle.load(open("/content/drive/MyDrive/transfer_learning/pickles/y_train.pickle", "rb"))

X_val = pickle.load(open("/content/drive/MyDrive/transfer_learning/pickles/X_val.pickle", "rb"))
y_val = pickle.load(open("/content/drive/MyDrive/transfer_learning/pickles/y_val.pickle", "rb"))

X_test = pickle.load(open("/content/drive/MyDrive/transfer_learning/pickles/X_test.pickle", "rb"))
y_test = pickle.load(open("/content/drive/MyDrive/transfer_learning/pickles/y_test.pickle", "rb"))

"""**Keras icinden model secerek model olusturma ve egitme**

---


"""

# temel model olarak MobileNetV2 belirledik. parametrelerini girelim.
base_model = tf.keras.applications.mobilenet_v2.MobileNetV2(include_top = False,
                                                     weights = 'imagenet',
                                                     input_shape = (128,128,3),
                                                     pooling="max")

for layer in base_model.layers:
    layer.trainable = False

# dropout gibi tekniklerle gerekli x degerine ulasarak bir sonuc tahmin edelim.
x = tf.keras.layers.Flatten()(base_model.output)
x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dropout(0.5)(x)
x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dropout(0.5)(x)
x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dropout(0.5)(x)
x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dropout(0.5)(x)
x = tf.keras.layers.Dense(1024, activation='relu')(x)
x = tf.keras.layers.Dropout(0.5)(x)
predictions = tf.keras.layers.Dense(1, activation = 'sigmoid')(x)

# son olarak modeli olusturalim.
head_model = tf.keras.Model(inputs = base_model.input, outputs = predictions)

# modelimizi calistiralim.
head_model.compile(optimizer='adam', loss=tf.keras.losses.binary_crossentropy, metrics=['accuracy'])

# 25 olarak belirledigimiz epoch suresince elde edilen loss, accuracy, val_loss ve val_accuracy gibi degerleri yazdiralim.
history = head_model.fit(X_train, y_train, batch_size=128, epochs=25, validation_data=(X_val, y_val))

head_model.evaluate(X_test, y_test)

"""Grafikler"""

plt.plot(history.history["loss"], label="Train")
plt.plot(history.history["val_loss"], label = "Validation")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()
plt.show()

plt.plot(history.history["accuracy"], label="Train")
plt.plot(history.history["val_accuracy"], label = "Validation")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()
plt.show()

# egittigimiz modeli kaydedelim.
head_model.save("trained_model")